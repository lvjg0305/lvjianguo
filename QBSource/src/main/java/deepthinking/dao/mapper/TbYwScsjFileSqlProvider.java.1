package deepthinking.dao.mapper;

import deepthinking.domain.TbYwScsjFile;
import deepthinking.domain.TbYwScsjFileCriteria.Criteria;
import deepthinking.domain.TbYwScsjFileCriteria.Criterion;
import deepthinking.domain.TbYwScsjFileCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class TbYwScsjFileSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TB_YW_SCSJ_FILE
     *
     * @mbg.generated
     */
    public String countByExample(TbYwScsjFileCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("TB_YW_SCSJ_FILE");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TB_YW_SCSJ_FILE
     *
     * @mbg.generated
     */
    public String deleteByExample(TbYwScsjFileCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("TB_YW_SCSJ_FILE");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TB_YW_SCSJ_FILE
     *
     * @mbg.generated
     */
    public String insertSelective(TbYwScsjFile record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("TB_YW_SCSJ_FILE");
        
        if (record.getScid() != null) {
            sql.VALUES("SCID", "#{scid,jdbcType=VARCHAR}");
        }
        
        if (record.getKm() != null) {
            sql.VALUES("KM", "#{km,jdbcType=VARCHAR}");
        }
        
        if (record.getBm() != null) {
            sql.VALUES("BM", "#{bm,jdbcType=VARCHAR}");
        }
        
        if (record.getYbs() != null) {
            sql.VALUES("YBS", "#{ybs,jdbcType=VARCHAR}");
        }
        
        if (record.getZt() != null) {
            sql.VALUES("ZT", "#{zt,jdbcType=VARCHAR}");
        }
        
        if (record.getRksj() != null) {
            sql.VALUES("RKSJ", "#{rksj,jdbcType=DATE}");
        }
        
        if (record.getScbt() != null) {
            sql.VALUES("SCBT", "#{scbt,jdbcType=VARCHAR}");
        }
        
        if (record.getScdx() != null) {
            sql.VALUES("SCDX", "#{scdx,jdbcType=INTEGER}");
        }
        
        if (record.getSclj() != null) {
            sql.VALUES("SCLJ", "#{sclj,jdbcType=VARCHAR}");
        }
        
        if (record.getScgs() != null) {
            sql.VALUES("SCGS", "#{scgs,jdbcType=VARCHAR}");
        }
        
        if (record.getSclb() != null) {
            sql.VALUES("SCLB", "#{sclb,jdbcType=VARCHAR}");
        }
        
        if (record.getLrry() != null) {
            sql.VALUES("LRRY", "#{lrry,jdbcType=VARCHAR}");
        }
        
        if (record.getLrsj() != null) {
            sql.VALUES("LRSJ", "#{lrsj,jdbcType=DATE}");
        }
        
        if (record.getBwxs() != null) {
            sql.VALUES("BWXS", "#{bwxs,jdbcType=VARCHAR}");
        }
        
        if (record.getMmdj() != null) {
            sql.VALUES("MMDJ", "#{mmdj,jdbcType=VARCHAR}");
        }
        
        if (record.getFwsj() != null) {
            sql.VALUES("FWSJ", "#{fwsj,jdbcType=DATE}");
        }
        
        if (record.getCssj() != null) {
            sql.VALUES("CSSJ", "#{cssj,jdbcType=DATE}");
        }
        
        if (record.getFwbh() != null) {
            sql.VALUES("FWBH", "#{fwbh,jdbcType=VARCHAR}");
        }
        
        if (record.getQf() != null) {
            sql.VALUES("QF", "#{qf,jdbcType=VARCHAR}");
        }
        
        if (record.getBz() != null) {
            sql.VALUES("BZ", "#{bz,jdbcType=VARCHAR}");
        }
        
        if (record.getZtc() != null) {
            sql.VALUES("ZTC", "#{ztc,jdbcType=VARCHAR}");
        }
        
        if (record.getTjm() != null) {
            sql.VALUES("TJM", "#{tjm,jdbcType=VARCHAR}");
        }
        
        if (record.getLwdw() != null) {
            sql.VALUES("LWDW", "#{lwdw,jdbcType=VARCHAR}");
        }
        
        if (record.getNr() != null) {
            sql.VALUES("NR", "#{nr,jdbcType=LONGVARBINARY}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TB_YW_SCSJ_FILE
     *
     * @mbg.generated
     */
    public String selectByExampleWithBLOBs(TbYwScsjFileCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("SCID");
        } else {
            sql.SELECT("SCID");
        }
        sql.SELECT("KM");
        sql.SELECT("BM");
        sql.SELECT("YBS");
        sql.SELECT("ZT");
        sql.SELECT("RKSJ");
        sql.SELECT("SCBT");
        sql.SELECT("SCDX");
        sql.SELECT("SCLJ");
        sql.SELECT("SCGS");
        sql.SELECT("SCLB");
        sql.SELECT("LRRY");
        sql.SELECT("LRSJ");
        sql.SELECT("BWXS");
        sql.SELECT("MMDJ");
        sql.SELECT("FWSJ");
        sql.SELECT("CSSJ");
        sql.SELECT("FWBH");
        sql.SELECT("QF");
        sql.SELECT("BZ");
        sql.SELECT("ZTC");
        sql.SELECT("TJM");
        sql.SELECT("LWDW");
        sql.SELECT("NR");
        sql.FROM("TB_YW_SCSJ_FILE");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TB_YW_SCSJ_FILE
     *
     * @mbg.generated
     */
    public String selectByExample(TbYwScsjFileCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("SCID");
        } else {
            sql.SELECT("SCID");
        }
        sql.SELECT("KM");
        sql.SELECT("BM");
        sql.SELECT("YBS");
        sql.SELECT("ZT");
        sql.SELECT("RKSJ");
        sql.SELECT("SCBT");
        sql.SELECT("SCDX");
        sql.SELECT("SCLJ");
        sql.SELECT("SCGS");
        sql.SELECT("SCLB");
        sql.SELECT("LRRY");
        sql.SELECT("LRSJ");
        sql.SELECT("BWXS");
        sql.SELECT("MMDJ");
        sql.SELECT("FWSJ");
        sql.SELECT("CSSJ");
        sql.SELECT("FWBH");
        sql.SELECT("QF");
        sql.SELECT("BZ");
        sql.SELECT("ZTC");
        sql.SELECT("TJM");
        sql.SELECT("LWDW");
        sql.FROM("TB_YW_SCSJ_FILE");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TB_YW_SCSJ_FILE
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TbYwScsjFile record = (TbYwScsjFile) parameter.get("record");
        TbYwScsjFileCriteria example = (TbYwScsjFileCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("TB_YW_SCSJ_FILE");
        
        if (record.getScid() != null) {
            sql.SET("SCID = #{record.scid,jdbcType=VARCHAR}");
        }
        
        if (record.getKm() != null) {
            sql.SET("KM = #{record.km,jdbcType=VARCHAR}");
        }
        
        if (record.getBm() != null) {
            sql.SET("BM = #{record.bm,jdbcType=VARCHAR}");
        }
        
        if (record.getYbs() != null) {
            sql.SET("YBS = #{record.ybs,jdbcType=VARCHAR}");
        }
        
        if (record.getZt() != null) {
            sql.SET("ZT = #{record.zt,jdbcType=VARCHAR}");
        }
        
        if (record.getRksj() != null) {
            sql.SET("RKSJ = #{record.rksj,jdbcType=DATE}");
        }
        
        if (record.getScbt() != null) {
            sql.SET("SCBT = #{record.scbt,jdbcType=VARCHAR}");
        }
        
        if (record.getScdx() != null) {
            sql.SET("SCDX = #{record.scdx,jdbcType=INTEGER}");
        }
        
        if (record.getSclj() != null) {
            sql.SET("SCLJ = #{record.sclj,jdbcType=VARCHAR}");
        }
        
        if (record.getScgs() != null) {
            sql.SET("SCGS = #{record.scgs,jdbcType=VARCHAR}");
        }
        
        if (record.getSclb() != null) {
            sql.SET("SCLB = #{record.sclb,jdbcType=VARCHAR}");
        }
        
        if (record.getLrry() != null) {
            sql.SET("LRRY = #{record.lrry,jdbcType=VARCHAR}");
        }
        
        if (record.getLrsj() != null) {
            sql.SET("LRSJ = #{record.lrsj,jdbcType=DATE}");
        }
        
        if (record.getBwxs() != null) {
            sql.SET("BWXS = #{record.bwxs,jdbcType=VARCHAR}");
        }
        
        if (record.getMmdj() != null) {
            sql.SET("MMDJ = #{record.mmdj,jdbcType=VARCHAR}");
        }
        
        if (record.getFwsj() != null) {
            sql.SET("FWSJ = #{record.fwsj,jdbcType=DATE}");
        }
        
        if (record.getCssj() != null) {
            sql.SET("CSSJ = #{record.cssj,jdbcType=DATE}");
        }
        
        if (record.getFwbh() != null) {
            sql.SET("FWBH = #{record.fwbh,jdbcType=VARCHAR}");
        }
        
        if (record.getQf() != null) {
            sql.SET("QF = #{record.qf,jdbcType=VARCHAR}");
        }
        
        if (record.getBz() != null) {
            sql.SET("BZ = #{record.bz,jdbcType=VARCHAR}");
        }
        
        if (record.getZtc() != null) {
            sql.SET("ZTC = #{record.ztc,jdbcType=VARCHAR}");
        }
        
        if (record.getTjm() != null) {
            sql.SET("TJM = #{record.tjm,jdbcType=VARCHAR}");
        }
        
        if (record.getLwdw() != null) {
            sql.SET("LWDW = #{record.lwdw,jdbcType=VARCHAR}");
        }
        
        if (record.getNr() != null) {
            sql.SET("NR = #{record.nr,jdbcType=LONGVARBINARY}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TB_YW_SCSJ_FILE
     *
     * @mbg.generated
     */
    public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("TB_YW_SCSJ_FILE");
        
        sql.SET("SCID = #{record.scid,jdbcType=VARCHAR}");
        sql.SET("KM = #{record.km,jdbcType=VARCHAR}");
        sql.SET("BM = #{record.bm,jdbcType=VARCHAR}");
        sql.SET("YBS = #{record.ybs,jdbcType=VARCHAR}");
        sql.SET("ZT = #{record.zt,jdbcType=VARCHAR}");
        sql.SET("RKSJ = #{record.rksj,jdbcType=DATE}");
        sql.SET("SCBT = #{record.scbt,jdbcType=VARCHAR}");
        sql.SET("SCDX = #{record.scdx,jdbcType=INTEGER}");
        sql.SET("SCLJ = #{record.sclj,jdbcType=VARCHAR}");
        sql.SET("SCGS = #{record.scgs,jdbcType=VARCHAR}");
        sql.SET("SCLB = #{record.sclb,jdbcType=VARCHAR}");
        sql.SET("LRRY = #{record.lrry,jdbcType=VARCHAR}");
        sql.SET("LRSJ = #{record.lrsj,jdbcType=DATE}");
        sql.SET("BWXS = #{record.bwxs,jdbcType=VARCHAR}");
        sql.SET("MMDJ = #{record.mmdj,jdbcType=VARCHAR}");
        sql.SET("FWSJ = #{record.fwsj,jdbcType=DATE}");
        sql.SET("CSSJ = #{record.cssj,jdbcType=DATE}");
        sql.SET("FWBH = #{record.fwbh,jdbcType=VARCHAR}");
        sql.SET("QF = #{record.qf,jdbcType=VARCHAR}");
        sql.SET("BZ = #{record.bz,jdbcType=VARCHAR}");
        sql.SET("ZTC = #{record.ztc,jdbcType=VARCHAR}");
        sql.SET("TJM = #{record.tjm,jdbcType=VARCHAR}");
        sql.SET("LWDW = #{record.lwdw,jdbcType=VARCHAR}");
        sql.SET("NR = #{record.nr,jdbcType=LONGVARBINARY}");
        
        TbYwScsjFileCriteria example = (TbYwScsjFileCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TB_YW_SCSJ_FILE
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("TB_YW_SCSJ_FILE");
        
        sql.SET("SCID = #{record.scid,jdbcType=VARCHAR}");
        sql.SET("KM = #{record.km,jdbcType=VARCHAR}");
        sql.SET("BM = #{record.bm,jdbcType=VARCHAR}");
        sql.SET("YBS = #{record.ybs,jdbcType=VARCHAR}");
        sql.SET("ZT = #{record.zt,jdbcType=VARCHAR}");
        sql.SET("RKSJ = #{record.rksj,jdbcType=DATE}");
        sql.SET("SCBT = #{record.scbt,jdbcType=VARCHAR}");
        sql.SET("SCDX = #{record.scdx,jdbcType=INTEGER}");
        sql.SET("SCLJ = #{record.sclj,jdbcType=VARCHAR}");
        sql.SET("SCGS = #{record.scgs,jdbcType=VARCHAR}");
        sql.SET("SCLB = #{record.sclb,jdbcType=VARCHAR}");
        sql.SET("LRRY = #{record.lrry,jdbcType=VARCHAR}");
        sql.SET("LRSJ = #{record.lrsj,jdbcType=DATE}");
        sql.SET("BWXS = #{record.bwxs,jdbcType=VARCHAR}");
        sql.SET("MMDJ = #{record.mmdj,jdbcType=VARCHAR}");
        sql.SET("FWSJ = #{record.fwsj,jdbcType=DATE}");
        sql.SET("CSSJ = #{record.cssj,jdbcType=DATE}");
        sql.SET("FWBH = #{record.fwbh,jdbcType=VARCHAR}");
        sql.SET("QF = #{record.qf,jdbcType=VARCHAR}");
        sql.SET("BZ = #{record.bz,jdbcType=VARCHAR}");
        sql.SET("ZTC = #{record.ztc,jdbcType=VARCHAR}");
        sql.SET("TJM = #{record.tjm,jdbcType=VARCHAR}");
        sql.SET("LWDW = #{record.lwdw,jdbcType=VARCHAR}");
        
        TbYwScsjFileCriteria example = (TbYwScsjFileCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TB_YW_SCSJ_FILE
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, TbYwScsjFileCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}